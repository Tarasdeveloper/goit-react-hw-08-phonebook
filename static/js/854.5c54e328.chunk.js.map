{"version":3,"file":"static/js/854.5c54e328.chunk.js","mappings":"iQAEaA,EAAYC,EAAAA,GAAAA,IAAH,gI,SCatB,EAZgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACE,SAACF,EAAD,WACE,yBAAME,KAGX,ECPYC,EAAcF,EAAAA,GAAAA,MAAH,kJASXG,EAAcH,EAAAA,GAAAA,MAAH,yFCcxB,EApBe,WACb,IAAMI,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,MAAnB,IAMrC,OACE,UAACR,EAAD,WAAa,yBAEX,SAACC,EAAD,CACEQ,KAAK,OACLC,MAAON,EACPO,SAV6B,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAC9CR,GAASW,EAAAA,EAAAA,IAAqBH,GAC/B,MAYF,ECmED,EA3EqB,WACnB,IAAMI,GAAkBT,EAAAA,EAAAA,IAAYU,EAAAA,IAC9BR,GAAWF,EAAAA,EAAAA,IAAYW,EAAAA,IACvBC,GAAYZ,EAAAA,EAAAA,IAAYa,EAAAA,GACxBC,GAAQd,EAAAA,EAAAA,IAAYe,EAAAA,IACpBlB,GAAWC,EAAAA,EAAAA,OAEjBkB,EAAAA,EAAAA,YAAU,WACHP,GAELZ,GAASW,EAAAA,EAAAA,MACV,GAAE,CAACC,EAAiBZ,IAErB,IAiBMoB,EAAeC,MAAMC,QAAQjB,IAAaA,EAASkB,OAAS,EAElE,OACE,UAAC,EAAD,YACE,kBAAMC,SAjBW,SAAAC,GACnBA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,cAEbC,EAAOF,EAAKG,SAASC,YAAYvB,MACjCwB,EAASL,EAAKG,SAASG,cAAczB,MAE3C,GAAIH,EAAS6B,MAAK,SAAAC,GAAO,OAAIA,EAAQN,OAASA,CAArB,IACvB,OAAOO,MAAM,qBAAD,OAAsBP,EAAtB,qBACd7B,GAASqC,EAAAA,EAAAA,IAAgB,CAAER,KAAAA,EAAMG,OAAAA,IAClC,EAMG,WACE,mBACA,8BACE,uBAAG,YACH,kBAAOH,KAAK,cAActB,KAAK,OAAO+B,UAAQ,QAEhD,mBACA,8BACE,uBAAG,cACH,kBAAOT,KAAK,gBAAgBtB,KAAK,OAAO+B,UAAQ,QAElD,mBACA,mBACA,mBAAQ/B,KAAK,SAAb,SAAsB,mBAGvBQ,IAAa,SAACwB,EAAA,EAAD,IACbtB,IAAS,yBAAG,8BAA4BA,MACzC,SAAC,EAAD,KACA,wBACGG,GACCf,EAASmC,KAAI,SAAAL,GACX,OACE,2BACE,0BAAI,SAAOA,EAAQN,SACnB,yBAAG,WAASM,EAAQH,WACpB,mBACES,QAAS,kBAhDGC,EAgDuBP,EAAQQ,QA/CzD3C,GAAS4C,EAAAA,EAAAA,IAAmBF,IADF,IAAAA,CAgDH,EACTnC,KAAK,SACL,aAAW,iBAHb,SAIC,kBAPM4B,EAAQQ,GAYpB,QAIV,C","sources":["components/Wrapper/Wrapper.styled.js","components/Wrapper/Wrapper.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 500px;\n  margin: 0 auto;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Container } from './Wrapper.styled';\n\nconst Wrapper = ({ children }) => {\n  return (\n    <Container>\n      <div>{children}</div>\n    </Container>\n  );\n};\n\nWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Wrapper;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 20px;\n  text-align: left;\n  margin: 0 auto;\n  width: 310px;\n`;\n\nexport const FilterInput = styled.input`\n  margin-bottom: 20px;\n  font-size: 15px;\n  margin-top: 10px;\n`;\n","import React from 'react';\nimport { FilterInput, FilterLabel } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { requestContactsThunk } from 'redux/contactsReducer';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.contacts.filter);\n\n  const handleFilterContactsByName = ({ target: { value } }) => {\n    dispatch(requestContactsThunk(value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        value={filterValue}\n        onChange={handleFilterContactsByName}\n      />\n    </FilterLabel>\n  );\n};\n\nexport default Filter;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAuthentificated } from '../redux/authReducer';\nimport {\n  addContactThunk,\n  deleteContactThunk,\n  requestContactsThunk,\n  selectContactsError,\n  selectContactsLoading,\n  selectUserContacts,\n} from '../redux/contactsReducer';\nimport { Loader } from '../components/Loader/Loader';\nimport Wrapper from 'components/Wrapper/Wrapper';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsPage = () => {\n  const authentificated = useSelector(selectAuthentificated);\n  const contacts = useSelector(selectUserContacts);\n  const isLoading = useSelector(selectContactsLoading);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!authentificated) return;\n\n    dispatch(requestContactsThunk());\n  }, [authentificated, dispatch]);\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n\n    const name = form.elements.contactName.value;\n    const number = form.elements.contactNumber.value;\n\n    if (contacts.some(contact => contact.name === name))\n      return alert(`Contact with name ${name} already exists!`);\n    dispatch(addContactThunk({ name, number }));\n  };\n\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  return (\n    <Wrapper>\n      <form onSubmit={handleSubmit}>\n        <br />\n        <label>\n          <p>Name: </p>\n          <input name=\"contactName\" type=\"text\" required />\n        </label>\n        <br />\n        <label>\n          <p>Number: </p>\n          <input name=\"contactNumber\" type=\"text\" required />\n        </label>\n        <br />\n        <br />\n        <button type=\"submit\">Add contact</button>\n      </form>\n\n      {isLoading && <Loader />}\n      {error && <p>Oops, some error occured...{error}</p>}\n      <Filter />\n      <ul>\n        {showContacts &&\n          contacts.map(contact => {\n            return (\n              <li key={contact.id}>\n                <h3>Name: {contact.name}</h3>\n                <p>Number: {contact.number}</p>\n                <button\n                  onClick={() => handleDeleteContact(contact.id)}\n                  type=\"button\"\n                  aria-label=\"Delete contact\"\n                >\n                  delete &times;\n                </button>\n              </li>\n            );\n          })}\n      </ul>\n    </Wrapper>\n  );\n};\n\nexport default ContactsPage;\n\n// import ContactForm from 'components/ContactForm/ContactForm';\n// import ContactList from 'components/ContactList/ContactList';\n// import Filter from 'components/Filter/Filter';\n// import Wrapper from 'components/Wrapper/Wrapper';\n\n// const ContactsPage = () => {\n//   return (\n//     <Wrapper>\n//       <h1>Phonebook</h1>\n//       <ContactForm />\n//       <h2>Contacts</h2>\n//       <Filter />\n//       <ContactList />\n//     </Wrapper>\n//   );\n// };\n"],"names":["Container","styled","children","FilterLabel","FilterInput","dispatch","useDispatch","filterValue","useSelector","state","contacts","filter","type","value","onChange","target","requestContactsThunk","authentificated","selectAuthentificated","selectUserContacts","isLoading","selectContactsLoading","error","selectContactsError","useEffect","showContacts","Array","isArray","length","onSubmit","event","preventDefault","form","currentTarget","name","elements","contactName","number","contactNumber","some","contact","alert","addContactThunk","required","Loader","map","onClick","contactId","id","deleteContactThunk"],"sourceRoot":""}