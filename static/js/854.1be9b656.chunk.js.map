{"version":3,"file":"static/js/854.1be9b656.chunk.js","mappings":"iQAEaA,EAAYC,EAAAA,GAAAA,IAAH,gI,SCatB,EAZgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACE,SAACF,EAAD,WACE,yBAAME,KAGX,ECPYC,EAAcF,EAAAA,GAAAA,MAAH,kJASXG,EAAcH,EAAAA,GAAAA,MAAH,yFCexB,EArBe,WACb,IAAMI,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASH,WAAnB,IAOrC,OACE,UAACJ,EAAD,WAAa,yBAEX,SAACC,EAAD,CACEO,KAAK,OACLC,MAAOL,EACPM,SAXqB,SAAAC,GACzB,IAAMC,EAAUD,EAAME,OAAOJ,MAC7BP,GAASY,EAAAA,EAAAA,IAAcF,GACxB,MAYF,ECiED,EA3EqB,WACnB,IAAML,GAAWF,EAAAA,EAAAA,IAAYU,EAAAA,IACvBC,GAAYX,EAAAA,EAAAA,IAAYY,EAAAA,GACxBC,GAAQb,EAAAA,EAAAA,IAAYc,EAAAA,IACpBjB,GAAWC,EAAAA,EAAAA,MAEjB,GAAoCiB,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBP,EAAnB,MAEAQ,EAAAA,EAAAA,YAAU,WACRpB,GAASqB,EAAAA,EAAAA,MACV,GAAE,CAACrB,IAEJ,IAiBMsB,EAAmBjB,EAASkB,QAAO,SAAAC,GAAO,OAC9CA,EAAQC,KAAKC,cAAcC,SAASR,EAAWO,cADD,IAGhD,OACE,UAAC,EAAD,YACE,kBAAME,SAlBW,SAAAnB,GACnBA,EAAMoB,iBAEN,IAAMC,EAAOrB,EAAMsB,cAEbN,EAAOK,EAAKE,SAASC,YAAY1B,MACjC2B,EAASJ,EAAKE,SAASG,cAAc5B,MAE3C,GAAIF,EAAS+B,MAAK,SAAAZ,GAAO,OAAIA,EAAQC,OAASA,CAArB,IACvB,OAAOY,MAAM,qBAAD,OAAsBZ,EAAtB,qBACdzB,GAASsC,EAAAA,EAAAA,IAAgB,CAAEb,KAAAA,EAAMS,OAAAA,IAClC,EAOG,WACE,mBACA,8BACE,uBAAG,YACH,kBAAOT,KAAK,cAAcnB,KAAK,OAAOiC,UAAQ,QAEhD,mBACA,8BACE,uBAAG,cACH,kBAAOd,KAAK,gBAAgBnB,KAAK,OAAOiC,UAAQ,QAElD,mBACA,mBACA,mBAAQjC,KAAK,SAAb,SAAsB,oBAGxB,SAAC,EAAD,CAAQM,cAAeA,IAEtBE,IAAa,SAAC0B,EAAA,EAAD,IACbxB,IAAS,yBAAG,8BAA4BA,MACzC,wBACGM,EAAiBmB,KAAI,SAAAjB,GACpB,OACE,2BACE,0BAAI,SAAOA,EAAQC,SACnB,yBAAG,WAASD,EAAQU,WACpB,mBACEQ,QAAS,kBAjDKC,EAiDqBnB,EAAQoB,QAhDvD5C,GAAS6C,EAAAA,EAAAA,IAAmBF,IADF,IAAAA,CAiDL,EACTrC,KAAK,SACL,aAAW,iBAHb,SAIC,kBAPMkB,EAAQoB,GAYpB,QAIR,C","sources":["components/Wrapper/Wrapper.styled.js","components/Wrapper/Wrapper.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 500px;\n  margin: 0 auto;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Container } from './Wrapper.styled';\n\nconst Wrapper = ({ children }) => {\n  return (\n    <Container>\n      <div>{children}</div>\n    </Container>\n  );\n};\n\nWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Wrapper;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 20px;\n  text-align: left;\n  margin: 0 auto;\n  width: 310px;\n`;\n\nexport const FilterInput = styled.input`\n  margin-bottom: 20px;\n  font-size: 15px;\n  margin-top: 10px;\n`;\n","import React from 'react';\nimport { FilterInput, FilterLabel } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilterText } from 'redux/contactsReducer';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.contacts.filterValue);\n\n  const handleFilterChange = event => {\n    const newText = event.target.value;\n    dispatch(setFilterText(newText)); // Диспатчите действие для обновления текста фильтра в состоянии\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        value={filterValue}\n        onChange={handleFilterChange}\n      />\n    </FilterLabel>\n  );\n};\n\nexport default Filter;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addContactThunk,\n  deleteContactThunk,\n  requestContactsThunk,\n  selectContactsError,\n  selectContactsLoading,\n  selectUserContacts,\n} from '../redux/contactsReducer';\nimport Loader from 'components/Loader/Loader';\nimport Wrapper from 'components/Wrapper/Wrapper';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectUserContacts);\n  const isLoading = useSelector(selectContactsLoading);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  const [filterText, setFilterText] = useState('');\n\n  useEffect(() => {\n    dispatch(requestContactsThunk());\n  }, [dispatch]);\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n\n    const name = form.elements.contactName.value;\n    const number = form.elements.contactNumber.value;\n\n    if (contacts.some(contact => contact.name === name))\n      return alert(`Contact with name ${name} already exists!`);\n    dispatch(addContactThunk({ name, number }));\n  };\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterText.toLowerCase())\n  );\n  return (\n    <Wrapper>\n      <form onSubmit={handleSubmit}>\n        <br />\n        <label>\n          <p>Name: </p>\n          <input name=\"contactName\" type=\"text\" required />\n        </label>\n        <br />\n        <label>\n          <p>Number: </p>\n          <input name=\"contactNumber\" type=\"text\" required />\n        </label>\n        <br />\n        <br />\n        <button type=\"submit\">Add contact</button>\n      </form>\n\n      <Filter setFilterText={setFilterText} />\n\n      {isLoading && <Loader />}\n      {error && <p>Oops, some error occured...{error}</p>}\n      <ul>\n        {filteredContacts.map(contact => {\n          return (\n            <li key={contact.id}>\n              <h3>Name: {contact.name}</h3>\n              <p>Number: {contact.number}</p>\n              <button\n                onClick={() => handleDeleteContact(contact.id)}\n                type=\"button\"\n                aria-label=\"Delete contact\"\n              >\n                delete &times;\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </Wrapper>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Container","styled","children","FilterLabel","FilterInput","dispatch","useDispatch","filterValue","useSelector","state","contacts","type","value","onChange","event","newText","target","setFilterText","selectUserContacts","isLoading","selectContactsLoading","error","selectContactsError","useState","filterText","useEffect","requestContactsThunk","filteredContacts","filter","contact","name","toLowerCase","includes","onSubmit","preventDefault","form","currentTarget","elements","contactName","number","contactNumber","some","alert","addContactThunk","required","Loader","map","onClick","contactId","id","deleteContactThunk"],"sourceRoot":""}